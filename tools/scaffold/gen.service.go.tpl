// Code generated by github.com/xmatrixstudio/violet.server/tools/scaffold.
// DO NOT EDIT.
// Scaffold Version: {{ $.BaseParam.Version }}

package {{ $.PackageName }}

import (
    "net/http"
{{ range $.PackageImports }}
    "{{ . }}"
{{- end }}
)

type {{ $.ServiceName }}Router interface {
{{- range $.ServiceMethods }}
    // {{ .Name }} {{ .Description }}
    {{ .Name }}(r *api.RequestContext{{ if not (IsEmptyType .RequestPath .RequestName) }}, req *{{ .RequestName }}{{ end }})
    {{- if not (IsEmptyType .ResponsePath .ResponseName) }}(*{{ .ResponseName }}, error){{ else }}error{{ end }}
{{- end }}
}

var {{ InternalName $.ServiceName }}Router {{ $.ServiceName }}Router

func Register{{ $.ServiceName }}Router(r *gin.Engine, router {{ $.ServiceName }}Router) {
    {{ InternalName $.ServiceName }}Router = router
{{- range $.ServiceMethods }}
    r.{{ .Method }}("{{ .URL }}", {{ InternalName .Name }})
{{- end }}
}

{{ range $.ServiceMethods }}
func {{ InternalName .Name }}(c *gin.Context) {
    r := api.NewRequestContext(c, "{{ .Name }}")
    defer api.RecycleRequestContext(r)
{{- if and (IsEmptyType .RequestPath .RequestName) (IsEmptyType .ResponsePath .ResponseName) }}
    err := {{ InternalName $.ServiceName }}Router.{{ .Name }}(r)
    c.PureJSON(http.StatusOK, api.NewResult(r, nil, err))
{{- else if IsEmptyType .RequestPath .RequestName }}
    resp, err := {{ InternalName $.ServiceName }}Router.{{ .Name }}(r)
    c.PureJSON(http.StatusOK, api.NewResult(r, resp, err))
{{- else if IsEmptyType .ResponsePath .ResponseName }}
    req := {{ .RequestName }}{}
    if err := c.ShouldBind(&req); err != nil {
        c.PureJSON(http.StatusOK, api.NewResult(r, nil, api.ErrBadRequest))
        return
    }
    err := {{ InternalName $.ServiceName }}Router.{{ .Name }}(r, &req)
    c.PureJSON(http.StatusOK, api.NewResult(r, nil, err))
{{- else }}
    req := {{ .RequestName }}{}
    if err := c.ShouldBind(&req); err != nil {
        c.PureJSON(http.StatusOK, api.NewResult(r, nil, api.ErrBadRequest))
        return
    }
    resp, err := {{ InternalName $.ServiceName }}Router.{{ .Name }}(r, &req)
    c.PureJSON(http.StatusOK, api.NewResult(r, resp, err))
{{- end }}
}
{{ end }}
