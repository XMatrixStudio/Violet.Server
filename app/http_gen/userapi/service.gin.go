// Code generated by github.com/xmatrixstudio/violet.server/tools/scaffold.
// DO NOT EDIT.
// Scaffold Version: 0.0.1

package userapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/xmatrixstudio/violet.server/app/api"
)

type UserRouter interface {
	// UserInfo 获取登陆用户信息
	UserInfo(r *api.RequestContext) (*UserInfoResponse, error)
	// UserLogin 用户登陆
	UserLogin(r *api.RequestContext, req *UserLoginRequest) error
	// UserLogout 用户登出
	UserLogout(r *api.RequestContext) error
	// UserRegister 用户注册
	UserRegister(r *api.RequestContext, req *UserRegisterRequest) error
}

var userRouter UserRouter

func RegisterUserRouter(r *gin.Engine, router UserRouter) {
	userRouter = router
	r.GET("/i/users/me", userInfo)
	r.POST("/i/users/session", userLogin)
	r.DELETE("/i/users/session", userLogout)
	r.POST("/i/users", userRegister)
}

func userInfo(c *gin.Context) {
	r := api.NewRequestContext(c, "UserInfo")
	defer api.RecycleRequestContext(r)
	resp, err := userRouter.UserInfo(r)
	c.PureJSON(http.StatusOK, api.NewResult(r, resp, err))
}

func userLogin(c *gin.Context) {
	r := api.NewRequestContext(c, "UserLogin")
	defer api.RecycleRequestContext(r)
	req := UserLoginRequest{}
	if err := c.ShouldBind(&req); err != nil {
		c.PureJSON(http.StatusOK, api.NewResult(r, nil, api.ErrBadRequest))
		return
	}
	err := userRouter.UserLogin(r, &req)
	c.PureJSON(http.StatusOK, api.NewResult(r, nil, err))
}

func userLogout(c *gin.Context) {
	r := api.NewRequestContext(c, "UserLogout")
	defer api.RecycleRequestContext(r)
	err := userRouter.UserLogout(r)
	c.PureJSON(http.StatusOK, api.NewResult(r, nil, err))
}

func userRegister(c *gin.Context) {
	r := api.NewRequestContext(c, "UserRegister")
	defer api.RecycleRequestContext(r)
	req := UserRegisterRequest{}
	if err := c.ShouldBind(&req); err != nil {
		c.PureJSON(http.StatusOK, api.NewResult(r, nil, api.ErrBadRequest))
		return
	}
	err := userRouter.UserRegister(r, &req)
	c.PureJSON(http.StatusOK, api.NewResult(r, nil, err))
}
